{"id":"../node_modules/graphql-anywhere/lib/async.js","dependencies":[{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/async.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/src/async.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/package.json","includedInParent":true,"mtime":1611716100163},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/package.json","includedInParent":true,"mtime":1611716099265},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/async.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/tslib/tslib.es6.js"},{"name":"apollo-utilities","loc":{"line":4,"column":33},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/async.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-utilities/lib/bundle.esm.js"},{"name":"./graphql","loc":{"line":5,"column":24},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/async.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/graphql.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nvar graphql_1 = require(\"./graphql\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var fragmentMap, contextValue, variables, result, execute;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n                    result = {};\n                    execute = function (selection) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                                        return [2];\n                                    }\n                                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                                    return [4, executeField(selection, rootValue, execContext)];\n                                case 1:\n                                    fieldResult = _a.sent();\n                                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n                                    if (fieldResult !== undefined) {\n                                        if (result[resultFieldKey] === undefined) {\n                                            result[resultFieldKey] = fieldResult;\n                                        }\n                                        else {\n                                            graphql_1.merge(result[resultFieldKey], fieldResult);\n                                        }\n                                    }\n                                    return [2];\n                                case 2:\n                                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                                        fragment = selection;\n                                    }\n                                    else {\n                                        fragment = fragmentMap[selection.name.value];\n                                        if (!fragment) {\n                                            throw new Error(\"No fragment named \" + selection.name.value);\n                                        }\n                                    }\n                                    typeCondition = fragment.typeCondition.name.value;\n                                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n                                case 3:\n                                    fragmentResult = _a.sent();\n                                    graphql_1.merge(result, fragmentResult);\n                                    _a.label = 4;\n                                case 4: return [2];\n                            }\n                        });\n                    }); };\n                    return [4, Promise.all(selectionSet.selections.map(execute))];\n                case 1:\n                    _a.sent();\n                    if (execContext.resultMapper) {\n                        return [2, execContext.resultMapper(result, rootValue)];\n                    }\n                    return [2, result];\n            }\n        });\n    });\n}\nfunction executeField(field, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var variables, contextValue, resolver, fieldName, args, info, result;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n                    fieldName = field.name.value;\n                    args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n                    info = {\n                        isLeaf: !field.selectionSet,\n                        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n                        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n                        field: field,\n                    };\n                    return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n                case 1:\n                    result = _a.sent();\n                    if (!field.selectionSet) {\n                        return [2, result];\n                    }\n                    if (result == null) {\n                        return [2, result];\n                    }\n                    if (Array.isArray(result)) {\n                        return [2, executeSubSelectedArray(field, result, execContext)];\n                    }\n                    return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n            }\n        });\n    });\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return Promise.all(result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    }));\n}\n"},"sourceMaps":{"js":{"version":3,"file":"async.js","sourceRoot":"","sources":["../src/async.ts"],"names":[],"mappings":";;;AAQA,qDAU0B;AAE1B,qCAOmB;AAkBnB,SAAgB,OAAO,CACrB,QAAkB,EAClB,QAAsB,EACtB,SAAe,EACf,YAAkB,EAClB,cAA4B,EAC5B,WAA6B;IAA7B,4BAAA,EAAA,gBAA6B;IAE7B,IAAM,cAAc,GAAG,oCAAiB,CAAC,QAAQ,CAAC,CAAC;IAEnD,IAAM,SAAS,GAAG,yCAAsB,CAAC,QAAQ,CAAC,CAAC;IACnD,IAAM,WAAW,GAAG,oCAAiB,CAAC,SAAS,CAAC,CAAC;IAEjD,IAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;IAG9C,IAAM,eAAe,GAAG,WAAW,CAAC,eAAe,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAEpE,IAAM,WAAW,GAAgB;QAC/B,WAAW,aAAA;QACX,YAAY,cAAA;QACZ,cAAc,gBAAA;QACd,YAAY,cAAA;QACZ,QAAQ,UAAA;QACR,eAAe,iBAAA;KAChB,CAAC;IAEF,OAAO,mBAAmB,CACxB,cAAc,CAAC,YAAY,EAC3B,SAAS,EACT,WAAW,CACZ,CAAC;AACJ,CAAC;AAhCD,0BAgCC;AAED,SAAe,mBAAmB,CAChC,YAA8B,EAC9B,SAAc,EACd,WAAwB;;;;;;;oBAEhB,WAAW,GAA8C,WAAW,YAAzD,EAAE,YAAY,GAAgC,WAAW,aAA3C,EAAkB,SAAS,GAAK,WAAW,eAAhB,CAAiB;oBAEvE,MAAM,GAAG,EAAE,CAAC;oBAEZ,OAAO,GAAG,UAAM,SAAS;;;;;oCAC7B,IAAI,CAAC,gCAAa,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;wCAExC,WAAO;qCACR;yCAEG,0BAAO,CAAC,SAAS,CAAC,EAAlB,cAAkB;oCACA,WAAM,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC,EAAA;;oCAAnE,WAAW,GAAG,SAAqD;oCAEnE,cAAc,GAAG,yCAAsB,CAAC,SAAS,CAAC,CAAC;oCAEzD,IAAI,WAAW,KAAK,SAAS,EAAE;wCAC7B,IAAI,MAAM,CAAC,cAAc,CAAC,KAAK,SAAS,EAAE;4CACxC,MAAM,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC;yCACtC;6CAAM;4CACL,eAAK,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,WAAW,CAAC,CAAC;yCAC5C;qCACF;oCAED,WAAO;;oCAKT,IAAI,mCAAgB,CAAC,SAAS,CAAC,EAAE;wCAC/B,QAAQ,GAAG,SAAS,CAAC;qCACtB;yCAAM;wCAEL,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wCAE7C,IAAI,CAAC,QAAQ,EAAE;4CACb,MAAM,IAAI,KAAK,CAAC,uBAAqB,SAAS,CAAC,IAAI,CAAC,KAAO,CAAC,CAAC;yCAC9D;qCACF;oCAEK,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC;yCAEpD,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,EAAE,YAAY,CAAC,EAAnE,cAAmE;oCAC9C,WAAM,mBAAmB,CAC9C,QAAQ,CAAC,YAAY,EACrB,SAAS,EACT,WAAW,CACZ,EAAA;;oCAJK,cAAc,GAAG,SAItB;oCAED,eAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;;;;;yBAEjC,CAAC;oBAEF,WAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAA;;oBAAvD,SAAuD,CAAC;oBAExD,IAAI,WAAW,CAAC,YAAY,EAAE;wBAC5B,WAAO,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,EAAC;qBACpD;oBAED,WAAO,MAAM,EAAC;;;;CACf;AAED,SAAe,YAAY,CACzB,KAAgB,EAChB,SAAc,EACd,WAAwB;;;;;;oBAEA,SAAS,GAA6B,WAAW,eAAxC,EAAE,YAAY,GAAe,WAAW,aAA1B,EAAE,QAAQ,GAAK,WAAW,SAAhB,CAAiB;oBAEpE,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;oBAC7B,IAAI,GAAG,2CAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;oBAElD,IAAI,GAAa;wBACrB,MAAM,EAAE,CAAC,KAAK,CAAC,YAAY;wBAC3B,SAAS,EAAE,yCAAsB,CAAC,KAAK,CAAC;wBACxC,UAAU,EAAE,4CAAyB,CAAC,KAAK,EAAE,SAAS,CAAC;wBACvD,KAAK,OAAA;qBACN,CAAC;oBAEa,WAAM,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,EAAA;;oBAAvE,MAAM,GAAG,SAA8D;oBAG7E,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;wBACvB,WAAO,MAAM,EAAC;qBACf;oBAID,IAAI,MAAM,IAAI,IAAI,EAAE;wBAElB,WAAO,MAAM,EAAC;qBACf;oBAED,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;wBACzB,WAAO,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,EAAC;qBAC5D;oBAGD,WAAO,mBAAmB,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,EAAE,WAAW,CAAC,EAAC;;;;CACrE;AAED,SAAS,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW;IACzD,OAAO,OAAO,CAAC,GAAG,CAChB,MAAM,CAAC,GAAG,CAAC,UAAA,IAAI;QAEb,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAGD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO,uBAAuB,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;SAC1D;QAGD,OAAO,mBAAmB,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC,CAAC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import {\n  DocumentNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from 'graphql';\n\nimport {\n  getMainDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  shouldInclude,\n  getDirectiveInfoFromField,\n  isField,\n  isInlineFragment,\n  resultKeyNameFromField,\n  argumentsObjectFromField,\n} from 'apollo-utilities';\n\nimport {\n  merge,\n  Resolver,\n  VariableMap,\n  ExecContext,\n  ExecInfo,\n  ExecOptions,\n} from './graphql';\n\n/* Based on graphql function from graphql-js:\n *\n * graphql(\n *   schema: GraphQLSchema,\n *   requestString: string,\n *   rootValue?: ?any,\n *   contextValue?: ?any,\n *   variableValues?: ?{[key: string]: any},\n *   operationName?: ?string\n * ): Promise<GraphQLResult>\n *\n * The default export as of graphql-anywhere is sync as of 4.0,\n * but below is an exported alternative that is async.\n * In the 5.0 version, this will be the only export again\n * and it will be async\n */\nexport function graphql(\n  resolver: Resolver,\n  document: DocumentNode,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues?: VariableMap,\n  execOptions: ExecOptions = {},\n): Promise<null | Object> {\n  const mainDefinition = getMainDefinition(document);\n\n  const fragments = getFragmentDefinitions(document);\n  const fragmentMap = createFragmentMap(fragments);\n\n  const resultMapper = execOptions.resultMapper;\n\n  // Default matcher always matches all fragments\n  const fragmentMatcher = execOptions.fragmentMatcher || (() => true);\n\n  const execContext: ExecContext = {\n    fragmentMap,\n    contextValue,\n    variableValues,\n    resultMapper,\n    resolver,\n    fragmentMatcher,\n  };\n\n  return executeSelectionSet(\n    mainDefinition.selectionSet,\n    rootValue,\n    execContext,\n  );\n}\n\nasync function executeSelectionSet(\n  selectionSet: SelectionSetNode,\n  rootValue: any,\n  execContext: ExecContext,\n) {\n  const { fragmentMap, contextValue, variableValues: variables } = execContext;\n\n  const result = {};\n\n  const execute = async selection => {\n    if (!shouldInclude(selection, variables)) {\n      // Skip this entirely\n      return;\n    }\n\n    if (isField(selection)) {\n      const fieldResult = await executeField(selection, rootValue, execContext);\n\n      const resultFieldKey = resultKeyNameFromField(selection);\n\n      if (fieldResult !== undefined) {\n        if (result[resultFieldKey] === undefined) {\n          result[resultFieldKey] = fieldResult;\n        } else {\n          merge(result[resultFieldKey], fieldResult);\n        }\n      }\n\n      return;\n    }\n\n    let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n    if (isInlineFragment(selection)) {\n      fragment = selection;\n    } else {\n      // This is a named fragment\n      fragment = fragmentMap[selection.name.value];\n\n      if (!fragment) {\n        throw new Error(`No fragment named ${selection.name.value}`);\n      }\n    }\n\n    const typeCondition = fragment.typeCondition.name.value;\n\n    if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n      const fragmentResult = await executeSelectionSet(\n        fragment.selectionSet,\n        rootValue,\n        execContext,\n      );\n\n      merge(result, fragmentResult);\n    }\n  };\n\n  await Promise.all(selectionSet.selections.map(execute));\n\n  if (execContext.resultMapper) {\n    return execContext.resultMapper(result, rootValue);\n  }\n\n  return result;\n}\n\nasync function executeField(\n  field: FieldNode,\n  rootValue: any,\n  execContext: ExecContext,\n): Promise<null | Object> {\n  const { variableValues: variables, contextValue, resolver } = execContext;\n\n  const fieldName = field.name.value;\n  const args = argumentsObjectFromField(field, variables);\n\n  const info: ExecInfo = {\n    isLeaf: !field.selectionSet,\n    resultKey: resultKeyNameFromField(field),\n    directives: getDirectiveInfoFromField(field, variables),\n    field,\n  };\n\n  const result = await resolver(fieldName, rootValue, args, contextValue, info);\n\n  // Handle all scalar types here\n  if (!field.selectionSet) {\n    return result;\n  }\n\n  // From here down, the field has a selection set, which means it's trying to\n  // query a GraphQLObjectType\n  if (result == null) {\n    // Basically any field in a GraphQL response can be null, or missing\n    return result;\n  }\n\n  if (Array.isArray(result)) {\n    return executeSubSelectedArray(field, result, execContext);\n  }\n\n  // Returned value is an object, and the query has a sub-selection. Recurse.\n  return executeSelectionSet(field.selectionSet, result, execContext);\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return Promise.all(\n    result.map(item => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return executeSubSelectedArray(field, item, execContext);\n      }\n\n      // This is an object, run the selection set on it\n      return executeSelectionSet(field.selectionSet, item, execContext);\n    }),\n  );\n}\n"]}},"error":null,"hash":"40ea8f4666e624e4f947e9e277e12f5b","cacheData":{"env":{}}}