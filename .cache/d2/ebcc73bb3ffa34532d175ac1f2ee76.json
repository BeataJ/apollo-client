{"id":"../node_modules/apollo-boost/lib/index.js","dependencies":[{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js.map","includedInParent":true,"mtime":1534514462000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/src/index.ts","includedInParent":true,"mtime":1534464768000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/package.json","includedInParent":true,"mtime":1611716100163},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/package.json","includedInParent":true,"mtime":1611716099266},{"name":"apollo-client","loc":{"line":42,"column":30},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-client/bundle.esm.js"},{"name":"apollo-link","loc":{"line":33,"column":28},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-link/lib/bundle.esm.js"},{"name":"apollo-cache-inmemory","loc":{"line":38,"column":38},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-cache-inmemory/lib/bundle.esm.js"},{"name":"apollo-link-http","loc":{"line":34,"column":33},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-link-http/lib/bundle.esm.js"},{"name":"apollo-link-state","loc":{"line":36,"column":34},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-link-state/lib/index.js"},{"name":"apollo-link-error","loc":{"line":37,"column":34},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-link-error/lib/bundle.esm.js"},{"name":"graphql-tag","loc":{"line":40,"column":28},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-boost/lib/index.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-tag/src/index.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"apollo-client\"));\n__export(require(\"apollo-link\"));\n__export(require(\"apollo-cache-inmemory\"));\nvar apollo_link_1 = require(\"apollo-link\");\nvar apollo_link_http_1 = require(\"apollo-link-http\");\nexports.HttpLink = apollo_link_http_1.HttpLink;\nvar apollo_link_state_1 = require(\"apollo-link-state\");\nvar apollo_link_error_1 = require(\"apollo-link-error\");\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\nexports.InMemoryCache = apollo_cache_inmemory_1.InMemoryCache;\nvar graphql_tag_1 = require(\"graphql-tag\");\nexports.gql = graphql_tag_1.default;\nvar apollo_client_1 = require(\"apollo-client\");\nvar PRESET_CONFIG_KEYS = [\n    'request',\n    'uri',\n    'credentials',\n    'headers',\n    'fetch',\n    'fetchOptions',\n    'clientState',\n    'onError',\n    'cacheRedirects',\n    'cache',\n];\nvar DefaultClient = (function (_super) {\n    __extends(DefaultClient, _super);\n    function DefaultClient(config) {\n        if (config === void 0) { config = {}; }\n        var _this = this;\n        if (config) {\n            var diff = Object.keys(config).filter(function (key) { return PRESET_CONFIG_KEYS.indexOf(key) === -1; });\n            if (diff.length > 0) {\n                console.warn('ApolloBoost was initialized with unsupported options: ' +\n                    (\"\" + diff.join(' ')));\n            }\n        }\n        var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError;\n        var cache = config.cache;\n        if (cache && cacheRedirects) {\n            throw new Error('Incompatible cache configuration. If providing `cache` then ' +\n                'configure the provided instance with `cacheRedirects` instead.');\n        }\n        if (!cache) {\n            cache = cacheRedirects\n                ? new apollo_cache_inmemory_1.InMemoryCache({ cacheRedirects: cacheRedirects })\n                : new apollo_cache_inmemory_1.InMemoryCache();\n        }\n        var stateLink = clientState\n            ? apollo_link_state_1.withClientState(__assign({}, clientState, { cache: cache }))\n            : false;\n        var errorLink = errorCallback\n            ? apollo_link_error_1.onError(errorCallback)\n            : apollo_link_error_1.onError(function (_a) {\n                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\n                if (graphQLErrors) {\n                    graphQLErrors.map(function (_a) {\n                        var message = _a.message, locations = _a.locations, path = _a.path;\n                        return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" +\n                            (locations + \", Path: \" + path));\n                    });\n                }\n                if (networkError) {\n                    console.log(\"[Network error]: \" + networkError);\n                }\n            });\n        var requestHandler = request\n            ? new apollo_link_1.ApolloLink(function (operation, forward) {\n                return new apollo_link_1.Observable(function (observer) {\n                    var handle;\n                    Promise.resolve(operation)\n                        .then(function (oper) { return request(oper); })\n                        .then(function () {\n                        handle = forward(operation).subscribe({\n                            next: observer.next.bind(observer),\n                            error: observer.error.bind(observer),\n                            complete: observer.complete.bind(observer),\n                        });\n                    })\n                        .catch(observer.error.bind(observer));\n                    return function () {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                    };\n                });\n            })\n            : false;\n        var httpLink = new apollo_link_http_1.HttpLink({\n            uri: uri || '/graphql',\n            fetch: fetch,\n            fetchOptions: fetchOptions || {},\n            credentials: credentials || 'same-origin',\n            headers: headers || {},\n        });\n        var link = apollo_link_1.ApolloLink.from([\n            errorLink,\n            requestHandler,\n            stateLink,\n            httpLink,\n        ].filter(function (x) { return !!x; }));\n        _this = _super.call(this, { cache: cache, link: link }) || this;\n        return _this;\n    }\n    return DefaultClient;\n}(apollo_client_1.default));\nexports.default = DefaultClient;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* necessary for backward compat */\r\nexport * from 'apollo-client';\r\nexport * from 'apollo-link';\r\nexport * from 'apollo-cache-inmemory';\r\n\r\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { withClientState, ClientStateConfig } from 'apollo-link-state';\r\nimport { onError, ErrorLink } from 'apollo-link-error';\r\n\r\nimport { ApolloCache } from 'apollo-cache';\r\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\r\nimport gql from 'graphql-tag';\r\nimport ApolloClient from 'apollo-client';\r\n\r\nexport { gql, InMemoryCache, HttpLink };\r\n\r\nexport interface PresetConfig {\r\n  request?: (operation: Operation) => Promise<void>;\r\n  uri?: string;\r\n  credentials?: string;\r\n  headers?: any;\r\n  fetch?: GlobalFetch['fetch'];\r\n  fetchOptions?: HttpLink.Options;\r\n  clientState?: ClientStateConfig;\r\n  onError?: ErrorLink.ErrorHandler;\r\n  cacheRedirects?: CacheResolverMap;\r\n  cache?: ApolloCache<any>;\r\n}\r\n\r\n// Yes, these are the exact same as the `PresetConfig` interface. We're\r\n// defining these again so they can be used to verify that valid config\r\n// options are being used in the `DefaultClient` constructor, for clients\r\n// that aren't using Typescript. This duplication is unfortunate, and at\r\n// some point can likely be adjusted so these items are inferred from\r\n// the `PresetConfig` interface using a Typescript transform at compilation\r\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\r\n// working properly, so this will have to be re-visited at some point.\r\n// For now, when updating the properties of the `PresetConfig` interface,\r\n// please also update this constant.\r\nconst PRESET_CONFIG_KEYS = [\r\n  'request',\r\n  'uri',\r\n  'credentials',\r\n  'headers',\r\n  'fetch',\r\n  'fetchOptions',\r\n  'clientState',\r\n  'onError',\r\n  'cacheRedirects',\r\n  'cache',\r\n];\r\n\r\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\r\n  constructor(config: PresetConfig = {}) {\r\n    if (config) {\r\n      const diff = Object.keys(config).filter(\r\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\r\n      );\r\n\r\n      if (diff.length > 0) {\r\n        console.warn(\r\n          'ApolloBoost was initialized with unsupported options: ' +\r\n            `${diff.join(' ')}`,\r\n        );\r\n      }\r\n    }\r\n\r\n    const {\r\n      request,\r\n      uri,\r\n      credentials,\r\n      headers,\r\n      fetch,\r\n      fetchOptions,\r\n      clientState,\r\n      cacheRedirects,\r\n      onError: errorCallback,\r\n    } = config;\r\n\r\n    let { cache } = config;\r\n\r\n    if (cache && cacheRedirects) {\r\n      throw new Error(\r\n        'Incompatible cache configuration. If providing `cache` then ' +\r\n          'configure the provided instance with `cacheRedirects` instead.',\r\n      );\r\n    }\r\n\r\n    if (!cache) {\r\n      cache = cacheRedirects\r\n        ? new InMemoryCache({ cacheRedirects })\r\n        : new InMemoryCache();\r\n    }\r\n\r\n    const stateLink = clientState\r\n      ? withClientState({ ...clientState, cache })\r\n      : false;\r\n\r\n    const errorLink = errorCallback\r\n      ? onError(errorCallback)\r\n      : onError(({ graphQLErrors, networkError }) => {\r\n          if (graphQLErrors) {\r\n            graphQLErrors.map(({ message, locations, path }) =>\r\n              // tslint:disable-next-line\r\n              console.log(\r\n                `[GraphQL error]: Message: ${message}, Location: ` +\r\n                  `${locations}, Path: ${path}`,\r\n              ),\r\n            );\r\n          }\r\n          if (networkError) {\r\n            // tslint:disable-next-line\r\n            console.log(`[Network error]: ${networkError}`);\r\n          }\r\n        });\r\n\r\n    const requestHandler = request\r\n      ? new ApolloLink(\r\n          (operation, forward) =>\r\n            new Observable(observer => {\r\n              let handle: any;\r\n              Promise.resolve(operation)\r\n                .then(oper => request(oper))\r\n                .then(() => {\r\n                  handle = forward(operation).subscribe({\r\n                    next: observer.next.bind(observer),\r\n                    error: observer.error.bind(observer),\r\n                    complete: observer.complete.bind(observer),\r\n                  });\r\n                })\r\n                .catch(observer.error.bind(observer));\r\n\r\n              return () => {\r\n                if (handle) {\r\n                  handle.unsubscribe();\r\n                }\r\n              };\r\n            }),\r\n        )\r\n      : false;\r\n\r\n    const httpLink = new HttpLink({\r\n      uri: uri || '/graphql',\r\n      fetch,\r\n      fetchOptions: fetchOptions || {},\r\n      credentials: credentials || 'same-origin',\r\n      headers: headers || {},\r\n    });\r\n\r\n    const link = ApolloLink.from([\r\n      errorLink,\r\n      requestHandler,\r\n      stateLink,\r\n      httpLink,\r\n    ].filter(x => !!x) as ApolloLink[]);\r\n\r\n    // super hacky, we will fix the types eventually\r\n    super({ cache, link } as any);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"80e7f624a48c6642d37e0aeac49d8dee","cacheData":{"env":{}}}