{"id":"../node_modules/graphql-anywhere/lib/graphql.js","dependencies":[{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/graphql.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/src/graphql.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/package.json","includedInParent":true,"mtime":1611716100163},{"name":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/package.json","includedInParent":true,"mtime":1611716099265},{"name":"apollo-utilities","loc":{"line":3,"column":33},"parent":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/graphql-anywhere/lib/graphql.js","resolved":"/Users/beata/Documents/projects/AnderwMead/graphQl-bootcamp-udemy/apollo-client/node_modules/apollo-utilities/lib/bundle.esm.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (variableValues === void 0) { variableValues = {}; }\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n    var result = {};\n    selectionSet.selections.forEach(function (selection) {\n        if (variables && !apollo_utilities_1.shouldInclude(selection, variables)) {\n            return;\n        }\n        if (apollo_utilities_1.isField(selection)) {\n            var fieldResult = executeField(selection, rootValue, execContext);\n            var resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n            if (fieldResult !== undefined) {\n                if (result[resultFieldKey] === undefined) {\n                    result[resultFieldKey] = fieldResult;\n                }\n                else {\n                    merge(result[resultFieldKey], fieldResult);\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (apollo_utilities_1.isInlineFragment(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = fragmentMap[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment.typeCondition.name.value;\n            if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n                var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n                merge(result, fragmentResult);\n            }\n        }\n    });\n    if (execContext.resultMapper) {\n        return execContext.resultMapper(result, rootValue);\n    }\n    return result;\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n    var fieldName = field.name.value;\n    var args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n        field: field,\n    };\n    var result = resolver(fieldName, rootValue, args, contextValue, info);\n    if (!field.selectionSet) {\n        return result;\n    }\n    if (result == null) {\n        return result;\n    }\n    if (Array.isArray(result)) {\n        return executeSubSelectedArray(field, result, execContext);\n    }\n    return executeSelectionSet(field.selectionSet, result, execContext);\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    });\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction merge(dest, src) {\n    if (src !== null && typeof src === 'object') {\n        Object.keys(src).forEach(function (key) {\n            var srcVal = src[key];\n            if (!hasOwn.call(dest, key)) {\n                dest[key] = srcVal;\n            }\n            else {\n                merge(dest[key], srcVal);\n            }\n        });\n    }\n}\nexports.merge = merge;\n"},"sourceMaps":{"js":{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../src/graphql.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from 'graphql';\n\nimport {\n  getMainDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n  DirectiveInfo,\n  shouldInclude,\n  getDirectiveInfoFromField,\n  isField,\n  isInlineFragment,\n  resultKeyNameFromField,\n  argumentsObjectFromField,\n} from 'apollo-utilities';\n\nexport type Resolver = (\n  fieldName: string,\n  rootValue: any,\n  args: any,\n  context: any,\n  info: ExecInfo,\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type ResultMapper = (\n  values: { [fieldName: string]: any },\n  rootValue: any,\n) => any;\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  contextValue: any;\n  variableValues: VariableMap;\n  resultMapper: ResultMapper;\n  resolver: Resolver;\n  fragmentMatcher: FragmentMatcher;\n};\n\nexport type ExecInfo = {\n  isLeaf: boolean;\n  resultKey: string;\n  directives: DirectiveInfo;\n  field: FieldNode;\n};\n\nexport type ExecOptions = {\n  resultMapper?: ResultMapper;\n  fragmentMatcher?: FragmentMatcher;\n};\n\n/* Based on graphql function from graphql-js:\n *\n * graphql(\n *   schema: GraphQLSchema,\n *   requestString: string,\n *   rootValue?: ?any,\n *   contextValue?: ?any,\n *   variableValues?: ?{[key: string]: any},\n *   operationName?: ?string\n * ): Promise<GraphQLResult>\n *\n * The default export as of graphql-anywhere is sync as of 4.0,\n * but below is an exported alternative that is async.\n * In the 5.0 version, this will be the only export again\n * and it will be async\n */\nexport function graphql(\n  resolver: Resolver,\n  document: DocumentNode,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues: VariableMap = {},\n  execOptions: ExecOptions = {},\n) {\n  const mainDefinition = getMainDefinition(document);\n\n  const fragments = getFragmentDefinitions(document);\n  const fragmentMap = createFragmentMap(fragments);\n\n  const resultMapper = execOptions.resultMapper;\n\n  // Default matcher always matches all fragments\n  const fragmentMatcher = execOptions.fragmentMatcher || (() => true);\n\n  const execContext: ExecContext = {\n    fragmentMap,\n    contextValue,\n    variableValues,\n    resultMapper,\n    resolver,\n    fragmentMatcher,\n  };\n\n  return executeSelectionSet(\n    mainDefinition.selectionSet,\n    rootValue,\n    execContext,\n  );\n}\n\nfunction executeSelectionSet(\n  selectionSet: SelectionSetNode,\n  rootValue: any,\n  execContext: ExecContext,\n) {\n  const { fragmentMap, contextValue, variableValues: variables } = execContext;\n\n  const result = {};\n\n  selectionSet.selections.forEach(selection => {\n    if (variables && !shouldInclude(selection, variables)) {\n      // Skip selection sets which we're able to determine should not be run\n      return;\n    }\n\n    if (isField(selection)) {\n      const fieldResult = executeField(selection, rootValue, execContext);\n\n      const resultFieldKey = resultKeyNameFromField(selection);\n\n      if (fieldResult !== undefined) {\n        if (result[resultFieldKey] === undefined) {\n          result[resultFieldKey] = fieldResult;\n        } else {\n          merge(result[resultFieldKey], fieldResult);\n        }\n      }\n    } else {\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment\n        fragment = fragmentMap[selection.name.value];\n\n        if (!fragment) {\n          throw new Error(`No fragment named ${selection.name.value}`);\n        }\n      }\n\n      const typeCondition = fragment.typeCondition.name.value;\n\n      if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n        const fragmentResult = executeSelectionSet(\n          fragment.selectionSet,\n          rootValue,\n          execContext,\n        );\n\n        merge(result, fragmentResult);\n      }\n    }\n  });\n\n  if (execContext.resultMapper) {\n    return execContext.resultMapper(result, rootValue);\n  }\n\n  return result;\n}\n\nfunction executeField(\n  field: FieldNode,\n  rootValue: any,\n  execContext: ExecContext,\n): any {\n  const { variableValues: variables, contextValue, resolver } = execContext;\n\n  const fieldName = field.name.value;\n  const args = argumentsObjectFromField(field, variables);\n\n  const info: ExecInfo = {\n    isLeaf: !field.selectionSet,\n    resultKey: resultKeyNameFromField(field),\n    directives: getDirectiveInfoFromField(field, variables),\n    field,\n  };\n\n  const result = resolver(fieldName, rootValue, args, contextValue, info);\n\n  // Handle all scalar types here\n  if (!field.selectionSet) {\n    return result;\n  }\n\n  // From here down, the field has a selection set, which means it's trying to\n  // query a GraphQLObjectType\n  if (result == null) {\n    // Basically any field in a GraphQL response can be null, or missing\n    return result;\n  }\n\n  if (Array.isArray(result)) {\n    return executeSubSelectedArray(field, result, execContext);\n  }\n\n  // Returned value is an object, and the query has a sub-selection. Recurse.\n  return executeSelectionSet(field.selectionSet, result, execContext);\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return result.map(item => {\n    // null value in array\n    if (item === null) {\n      return null;\n    }\n\n    // This is a nested array, recurse\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    // This is an object, run the selection set on it\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  });\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport function merge(dest, src) {\n  if (src !== null && typeof src === 'object') {\n    Object.keys(src).forEach(key => {\n      const srcVal = src[key];\n      if (!hasOwn.call(dest, key)) {\n        dest[key] = srcVal;\n      } else {\n        merge(dest[key], srcVal);\n      }\n    });\n  }\n}\n"]}},"error":null,"hash":"a8a9e0ee99c04bc13a80cc171757ee41","cacheData":{"env":{}}}